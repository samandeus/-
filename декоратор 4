import time

class RateLimiter:
    def __init__(self, max_calls, period):
        self.max_calls = max_calls  # Максимальное количество вызовов
        self.period = period        # Время, за которое эти вызовы можно выполнить
        self.calls = []             # Список времени вызовов

    def __call__(self, func):
        def wrapper(*args, **kwargs):
            current_time = time.time()  # Текущее время
            # Удаляем вызовы, которые вышли за пределы периода
            self.calls = [call for call in self.calls if current_time - call < self.period]
            if len(self.calls) >= self.max_calls:
                raise Exception("Rate limit exceeded. Please try again later.")
            self.calls.append(current_time)  # Записываем время вызова
            return func(*args, **kwargs)
        return wrapper

@RateLimiter(max_calls=6, period=10)
def api_call():
    print("API call executed successfully...")

# Тест
for _ in range(8):
    try:
        api_call()
    except Exception as e:
        print(f"Error occurred: {e}")
time.sleep(10)
api_call()

